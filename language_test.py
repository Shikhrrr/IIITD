from flask import Flask, request, jsonify
from config import Config
from db import create_database, execute_query
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config.from_object(Config)

# In-memory storage for user language preferences
user_languages = {}

# Language-specific messages
MESSAGES = {
    'en': {
        'welcome': """ü§ñ *Sales Analytics Bot*

Choose your preferred language / ‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç:

1Ô∏è‚É£ *English* - Continue in English
2Ô∏è‚É£ *‡§π‡§ø‡§Ç‡§¶‡•Ä* - ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç

Reply with 1 or 2 to select language.""",
        'help': """ü§ñ *Sales Analytics Bot*

Ask me questions about your sales data! Here are some examples:

‚Ä¢ "Which item sold the most last week?"
‚Ä¢ "What is the total profit for this month?"
‚Ä¢ "Which items will expire in the next 3 days?"
‚Ä¢ "What are the top 5 selling items?"
‚Ä¢ "How much profit did we make from milk sales?"

Type 'help' anytime for this message.
Type 'language' to change language.""",
        'language_changed': "‚úÖ Language changed to English!",
        'processing': "Processing your query...",
        'error': "Sorry, I encountered an error. Please try again."
    },
    'hi': {
        'welcome': """ü§ñ *Sales Analytics Bot*

‡§Ö‡§™‡§®‡•Ä ‡§™‡§∏‡§Ç‡§¶‡•Ä‡§¶‡§æ ‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡•á‡§Ç / Choose your preferred language:

1Ô∏è‚É£ *English* - Continue in English
2Ô∏è‚É£ *‡§π‡§ø‡§Ç‡§¶‡•Ä* - ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§ú‡§æ‡§∞‡•Ä ‡§∞‡§ñ‡•á‡§Ç

‡§≠‡§æ‡§∑‡§æ ‡§ö‡•Å‡§®‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 1 ‡§Ø‡§æ 2 ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§Ç‡•§""",
        'help': """ü§ñ *Sales Analytics Bot*

‡§Ö‡§™‡§®‡•á ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§°‡•á‡§ü‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•Ç‡§õ‡•á‡§Ç! ‡§Ø‡§π‡§æ‡§Å ‡§ï‡•Å‡§õ ‡§â‡§¶‡§æ‡§π‡§∞‡§£ ‡§π‡•à‡§Ç:

‚Ä¢ "‡§™‡§ø‡§õ‡§≤‡•á ‡§π‡§´‡•ç‡§§‡•á ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§ø‡§ï‡§æ?"
‚Ä¢ "‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§æ ‡§ï‡•Å‡§≤ ‡§Æ‡•Å‡§®‡§æ‡§´‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§π‡•à?"
‚Ä¢ "‡§Ö‡§ó‡§≤‡•á 3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç?"
‚Ä¢ "‡§ü‡•â‡§™ 5 ‡§¨‡§ø‡§ï‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§π‡•à‡§Ç?"
‚Ä¢ "‡§¶‡•Ç‡§ß ‡§ï‡•Ä ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡•Å‡§®‡§æ‡§´‡§æ ‡§π‡•Å‡§Ü?"

‡§ï‡§ø‡§∏‡•Ä ‡§≠‡•Ä ‡§∏‡§Æ‡§Ø 'help' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§
‡§≠‡§æ‡§∑‡§æ ‡§¨‡§¶‡§≤‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è 'language' ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡•á‡§Ç‡•§""",
        'language_changed': "‚úÖ ‡§≠‡§æ‡§∑‡§æ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤ ‡§¶‡•Ä ‡§ó‡§à!",
        'processing': "‡§Ü‡§™‡§ï‡§æ ‡§∏‡§µ‡§æ‡§≤ ‡§™‡•ç‡§∞‡•ã‡§∏‡•á‡§∏ ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...",
        'error': "‡§Æ‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç, ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§Ü‡§à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§´‡§ø‡§∞ ‡§∏‡•á ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞‡•á‡§Ç‡•§"
    }
}

def get_user_language(user_id):
    """Get user's preferred language"""
    return user_languages.get(user_id, 'en')

def set_user_language(user_id, language):
    """Set user's preferred language"""
    user_languages[user_id] = language

def get_message(key, language='en'):
    """Get localized message"""
    return MESSAGES.get(language, MESSAGES['en']).get(key, MESSAGES['en'][key])

def process_query_simple(query, language='en'):
    """Simple query processing without AI (for testing)"""
    try:
        # Simple keyword-based responses
        query_lower = query.lower()
        
        if 'total' in query_lower and ('profit' in query_lower or '‡§Æ‡•Å‡§®‡§æ‡§´‡§æ' in query):
            if language == 'hi':
                return "‡§ï‡•Å‡§≤ ‡§Æ‡•Å‡§®‡§æ‡§´‡§æ: $522.12"
            else:
                return "Total profit: $522.12"
        
        elif 'top' in query_lower or '‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ' in query:
            if language == 'hi':
                return "‡§ü‡•â‡§™ ‡§¨‡§ø‡§ï‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç:\n1. ‡§ü‡§Æ‡§æ‡§ü‡§∞ (283)\n2. ‡§ï‡•á‡§≤‡•á (278)\n3. ‡§Æ‡§õ‡§≤‡•Ä (200)"
            else:
                return "Top selling items:\n1. Tomatoes (283)\n2. Bananas (278)\n3. Fish (200)"
        
        elif 'milk' in query_lower or '‡§¶‡•Ç‡§ß' in query:
            if language == 'hi':
                return "‡§¶‡•Ç‡§ß ‡§ï‡•Ä ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä: 109 ‡§Ø‡•Ç‡§®‡§ø‡§ü"
            else:
                return "Milk sales: 109 units"
        
        else:
            if language == 'hi':
                return f"‡§∏‡§µ‡§æ‡§≤: {query}\n\n‡§Æ‡•à‡§Ç ‡§á‡§∏ ‡§∏‡§µ‡§æ‡§≤ ‡§ï‡§æ ‡§ú‡§µ‡§æ‡§¨ ‡§¶‡•á‡§®‡•á ‡§ï‡•Ä ‡§ï‡•ã‡§∂‡§ø‡§∂ ‡§ï‡§∞ ‡§∞‡§π‡§æ ‡§π‡•Ç‡§Ç..."
            else:
                return f"Query: {query}\n\nI'm trying to answer this question..."
    
    except Exception as e:
        if language == 'hi':
            return f"‡§§‡•ç‡§∞‡•Å‡§ü‡§ø: {str(e)}"
        else:
            return f"Error: {str(e)}"

@app.route('/')
def home():
    """Home page with basic information"""
    return jsonify({
        "message": "Sales Analytics Bot - Language Test Mode",
        "status": "running",
        "endpoints": {
            "test_query": "/test-query",
            "health": "/health",
            "language": "/language"
        }
    })

@app.route('/health')
def health():
    """Health check endpoint"""
    return jsonify({"status": "healthy"})

@app.route('/language', methods=['POST'])
def set_language():
    """Set user language preference"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default')
        language = data.get('language', 'en')
        
        if language not in ['en', 'hi']:
            return jsonify({"error": "Language must be 'en' or 'hi'"}), 400
        
        set_user_language(user_id, language)
        
        return jsonify({
            "success": True,
            "user_id": user_id,
            "language": language,
            "message": get_message('language_changed', language)
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/test-query', methods=['POST'])
def test_query():
    """Test endpoint for queries with language support"""
    try:
        data = request.get_json()
        user_id = data.get('user_id', 'default')
        query = data.get('query', '')
        
        if not query:
            return jsonify({"error": "Please provide a 'query' in the request body"}), 400
        
        # Get user's language preference
        user_lang = get_user_language(user_id)
        
        logger.info(f"Processing query in {user_lang}: {query}")
        
        # Process the query
        response = process_query_simple(query, user_lang)
        
        return jsonify({
            "user_id": user_id,
            "language": user_lang,
            "query": query,
            "response": response,
            "success": True
        })
        
    except Exception as e:
        logger.error(f"Error processing query: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/sample-questions/<language>')
def sample_questions(language):
    """Get sample questions in specified language"""
    questions = {
        'en': [
            "Which item sold the most last week?",
            "What is the total profit for this month?",
            "Which items will expire in the next 3 days?",
            "What are the top 5 selling items?",
            "How much profit did we make from milk sales?"
        ],
        'hi': [
            "‡§™‡§ø‡§õ‡§≤‡•á ‡§π‡§´‡•ç‡§§‡•á ‡§∏‡§¨‡§∏‡•á ‡§ú‡•ç‡§Ø‡§æ‡§¶‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§¨‡§ø‡§ï‡§æ?",
            "‡§á‡§∏ ‡§Æ‡§π‡•Ä‡§®‡•á ‡§ï‡§æ ‡§ï‡•Å‡§≤ ‡§Æ‡•Å‡§®‡§æ‡§´‡§æ ‡§ï‡§ø‡§§‡§®‡§æ ‡§π‡•à?",
            "‡§Ö‡§ó‡§≤‡•á 3 ‡§¶‡§ø‡§®‡•ã‡§Ç ‡§Æ‡•á‡§Ç ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§è‡§ï‡•ç‡§∏‡§™‡§æ‡§Ø‡§∞ ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à‡§Ç?",
            "‡§ü‡•â‡§™ 5 ‡§¨‡§ø‡§ï‡§®‡•á ‡§µ‡§æ‡§≤‡•Ä ‡§ö‡•Ä‡§ú‡•á‡§Ç ‡§ï‡•å‡§® ‡§∏‡•Ä ‡§π‡•à‡§Ç?",
            "‡§¶‡•Ç‡§ß ‡§ï‡•Ä ‡§¨‡§ø‡§ï‡•ç‡§∞‡•Ä ‡§∏‡•á ‡§ï‡§ø‡§§‡§®‡§æ ‡§Æ‡•Å‡§®‡§æ‡§´‡§æ ‡§π‡•Å‡§Ü?"
        ]
    }
    
    return jsonify({
        "language": language,
        "questions": questions.get(language, questions['en'])
    })

if __name__ == '__main__':
    # Create database and sample data
    create_database()
    logger.info("Database initialized with sample data")
    
    # Run the Flask app
    app.run(
        host='0.0.0.0',
        port=5002,
        debug=Config.DEBUG
    ) 